// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_register_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_register_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_register_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_register_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_register_2eproto;
namespace talko {
namespace registry {
class ServiceInstance;
class ServiceInstanceDefaultTypeInternal;
extern ServiceInstanceDefaultTypeInternal _ServiceInstance_default_instance_;
class ServiceRequest;
class ServiceRequestDefaultTypeInternal;
extern ServiceRequestDefaultTypeInternal _ServiceRequest_default_instance_;
class ServiceResponse;
class ServiceResponseDefaultTypeInternal;
extern ServiceResponseDefaultTypeInternal _ServiceResponse_default_instance_;
}  // namespace registry
}  // namespace talko
PROTOBUF_NAMESPACE_OPEN
template<> ::talko::registry::ServiceInstance* Arena::CreateMaybeMessage<::talko::registry::ServiceInstance>(Arena*);
template<> ::talko::registry::ServiceRequest* Arena::CreateMaybeMessage<::talko::registry::ServiceRequest>(Arena*);
template<> ::talko::registry::ServiceResponse* Arena::CreateMaybeMessage<::talko::registry::ServiceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace talko {
namespace registry {

enum RequestType : int {
  REGISTER = 0,
  DISCOVER = 1,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = REGISTER;
constexpr RequestType RequestType_MAX = DISCOVER;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor();
template<typename T>
inline const std::string& RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestType_descriptor(), enum_t_value);
}
inline bool RequestType_Parse(
    const std::string& name, RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
// ===================================================================

class ServiceInstance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:talko.registry.ServiceInstance) */ {
 public:
  ServiceInstance();
  virtual ~ServiceInstance();

  ServiceInstance(const ServiceInstance& from);
  ServiceInstance(ServiceInstance&& from) noexcept
    : ServiceInstance() {
    *this = ::std::move(from);
  }

  inline ServiceInstance& operator=(const ServiceInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInstance& operator=(ServiceInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInstance* internal_default_instance() {
    return reinterpret_cast<const ServiceInstance*>(
               &_ServiceInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceInstance& a, ServiceInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInstance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInstance* New() const final {
    return CreateMaybeMessage<ServiceInstance>(nullptr);
  }

  ServiceInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInstance& from);
  void MergeFrom(const ServiceInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "talko.registry.ServiceInstance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2eproto);
    return ::descriptor_table_register_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kAddressFieldNumber = 3,
    kPortFieldNumber = 4,
  };
  // bytes service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const void* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // bytes method_name = 2;
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const void* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // bytes address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:talko.registry.ServiceInstance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2eproto;
};
// -------------------------------------------------------------------

class ServiceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:talko.registry.ServiceRequest) */ {
 public:
  ServiceRequest();
  virtual ~ServiceRequest();

  ServiceRequest(const ServiceRequest& from);
  ServiceRequest(ServiceRequest&& from) noexcept
    : ServiceRequest() {
    *this = ::std::move(from);
  }

  inline ServiceRequest& operator=(const ServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRequest& operator=(ServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceRequest*>(
               &_ServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceRequest& a, ServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRequest* New() const final {
    return CreateMaybeMessage<ServiceRequest>(nullptr);
  }

  ServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceRequest& from);
  void MergeFrom(const ServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "talko.registry.ServiceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2eproto);
    return ::descriptor_table_register_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 2,
    kRequestTypeFieldNumber = 1,
  };
  // .talko.registry.ServiceInstance instance = 2;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::talko::registry::ServiceInstance& instance() const;
  ::talko::registry::ServiceInstance* release_instance();
  ::talko::registry::ServiceInstance* mutable_instance();
  void set_allocated_instance(::talko::registry::ServiceInstance* instance);
  private:
  const ::talko::registry::ServiceInstance& _internal_instance() const;
  ::talko::registry::ServiceInstance* _internal_mutable_instance();
  public:

  // .talko.registry.RequestType request_type = 1;
  void clear_request_type();
  ::talko::registry::RequestType request_type() const;
  void set_request_type(::talko::registry::RequestType value);
  private:
  ::talko::registry::RequestType _internal_request_type() const;
  void _internal_set_request_type(::talko::registry::RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:talko.registry.ServiceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::talko::registry::ServiceInstance* instance_;
  int request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2eproto;
};
// -------------------------------------------------------------------

class ServiceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:talko.registry.ServiceResponse) */ {
 public:
  ServiceResponse();
  virtual ~ServiceResponse();

  ServiceResponse(const ServiceResponse& from);
  ServiceResponse(ServiceResponse&& from) noexcept
    : ServiceResponse() {
    *this = ::std::move(from);
  }

  inline ServiceResponse& operator=(const ServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceResponse& operator=(ServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceResponse*>(
               &_ServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceResponse& a, ServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceResponse* New() const final {
    return CreateMaybeMessage<ServiceResponse>(nullptr);
  }

  ServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceResponse& from);
  void MergeFrom(const ServiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "talko.registry.ServiceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2eproto);
    return ::descriptor_table_register_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kInstanceFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // bytes err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const void* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // .talko.registry.ServiceInstance instance = 3;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::talko::registry::ServiceInstance& instance() const;
  ::talko::registry::ServiceInstance* release_instance();
  ::talko::registry::ServiceInstance* mutable_instance();
  void set_allocated_instance(::talko::registry::ServiceInstance* instance);
  private:
  const ::talko::registry::ServiceInstance& _internal_instance() const;
  ::talko::registry::ServiceInstance* _internal_mutable_instance();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:talko.registry.ServiceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::talko::registry::ServiceInstance* instance_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceInstance

// bytes service_name = 1;
inline void ServiceInstance::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInstance::service_name() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceInstance.service_name)
  return _internal_service_name();
}
inline void ServiceInstance::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:talko.registry.ServiceInstance.service_name)
}
inline std::string* ServiceInstance::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:talko.registry.ServiceInstance.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ServiceInstance::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void ServiceInstance::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInstance::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:talko.registry.ServiceInstance.service_name)
}
inline void ServiceInstance::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:talko.registry.ServiceInstance.service_name)
}
inline void ServiceInstance::set_service_name(const void* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:talko.registry.ServiceInstance.service_name)
}
inline std::string* ServiceInstance::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInstance::release_service_name() {
  // @@protoc_insertion_point(field_release:talko.registry.ServiceInstance.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInstance::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:talko.registry.ServiceInstance.service_name)
}

// bytes method_name = 2;
inline void ServiceInstance::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInstance::method_name() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceInstance.method_name)
  return _internal_method_name();
}
inline void ServiceInstance::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:talko.registry.ServiceInstance.method_name)
}
inline std::string* ServiceInstance::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:talko.registry.ServiceInstance.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& ServiceInstance::_internal_method_name() const {
  return method_name_.GetNoArena();
}
inline void ServiceInstance::_internal_set_method_name(const std::string& value) {
  
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInstance::set_method_name(std::string&& value) {
  
  method_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:talko.registry.ServiceInstance.method_name)
}
inline void ServiceInstance::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:talko.registry.ServiceInstance.method_name)
}
inline void ServiceInstance::set_method_name(const void* value, size_t size) {
  
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:talko.registry.ServiceInstance.method_name)
}
inline std::string* ServiceInstance::_internal_mutable_method_name() {
  
  return method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInstance::release_method_name() {
  // @@protoc_insertion_point(field_release:talko.registry.ServiceInstance.method_name)
  
  return method_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInstance::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:talko.registry.ServiceInstance.method_name)
}

// bytes address = 3;
inline void ServiceInstance::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInstance::address() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceInstance.address)
  return _internal_address();
}
inline void ServiceInstance::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:talko.registry.ServiceInstance.address)
}
inline std::string* ServiceInstance::mutable_address() {
  // @@protoc_insertion_point(field_mutable:talko.registry.ServiceInstance.address)
  return _internal_mutable_address();
}
inline const std::string& ServiceInstance::_internal_address() const {
  return address_.GetNoArena();
}
inline void ServiceInstance::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInstance::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:talko.registry.ServiceInstance.address)
}
inline void ServiceInstance::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:talko.registry.ServiceInstance.address)
}
inline void ServiceInstance::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:talko.registry.ServiceInstance.address)
}
inline std::string* ServiceInstance::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInstance::release_address() {
  // @@protoc_insertion_point(field_release:talko.registry.ServiceInstance.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInstance::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:talko.registry.ServiceInstance.address)
}

// int32 port = 4;
inline void ServiceInstance::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInstance::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInstance::port() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceInstance.port)
  return _internal_port();
}
inline void ServiceInstance::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ServiceInstance::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:talko.registry.ServiceInstance.port)
}

// -------------------------------------------------------------------

// ServiceRequest

// .talko.registry.RequestType request_type = 1;
inline void ServiceRequest::clear_request_type() {
  request_type_ = 0;
}
inline ::talko::registry::RequestType ServiceRequest::_internal_request_type() const {
  return static_cast< ::talko::registry::RequestType >(request_type_);
}
inline ::talko::registry::RequestType ServiceRequest::request_type() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceRequest.request_type)
  return _internal_request_type();
}
inline void ServiceRequest::_internal_set_request_type(::talko::registry::RequestType value) {
  
  request_type_ = value;
}
inline void ServiceRequest::set_request_type(::talko::registry::RequestType value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:talko.registry.ServiceRequest.request_type)
}

// .talko.registry.ServiceInstance instance = 2;
inline bool ServiceRequest::_internal_has_instance() const {
  return this != internal_default_instance() && instance_ != nullptr;
}
inline bool ServiceRequest::has_instance() const {
  return _internal_has_instance();
}
inline void ServiceRequest::clear_instance() {
  if (GetArenaNoVirtual() == nullptr && instance_ != nullptr) {
    delete instance_;
  }
  instance_ = nullptr;
}
inline const ::talko::registry::ServiceInstance& ServiceRequest::_internal_instance() const {
  const ::talko::registry::ServiceInstance* p = instance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::talko::registry::ServiceInstance*>(
      &::talko::registry::_ServiceInstance_default_instance_);
}
inline const ::talko::registry::ServiceInstance& ServiceRequest::instance() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceRequest.instance)
  return _internal_instance();
}
inline ::talko::registry::ServiceInstance* ServiceRequest::release_instance() {
  // @@protoc_insertion_point(field_release:talko.registry.ServiceRequest.instance)
  
  ::talko::registry::ServiceInstance* temp = instance_;
  instance_ = nullptr;
  return temp;
}
inline ::talko::registry::ServiceInstance* ServiceRequest::_internal_mutable_instance() {
  
  if (instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::talko::registry::ServiceInstance>(GetArenaNoVirtual());
    instance_ = p;
  }
  return instance_;
}
inline ::talko::registry::ServiceInstance* ServiceRequest::mutable_instance() {
  // @@protoc_insertion_point(field_mutable:talko.registry.ServiceRequest.instance)
  return _internal_mutable_instance();
}
inline void ServiceRequest::set_allocated_instance(::talko::registry::ServiceInstance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instance_;
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:talko.registry.ServiceRequest.instance)
}

// -------------------------------------------------------------------

// ServiceResponse

// bool success = 1;
inline void ServiceResponse::clear_success() {
  success_ = false;
}
inline bool ServiceResponse::_internal_success() const {
  return success_;
}
inline bool ServiceResponse::success() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceResponse.success)
  return _internal_success();
}
inline void ServiceResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServiceResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:talko.registry.ServiceResponse.success)
}

// bytes err_msg = 2;
inline void ServiceResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceResponse.err_msg)
  return _internal_err_msg();
}
inline void ServiceResponse::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:talko.registry.ServiceResponse.err_msg)
}
inline std::string* ServiceResponse::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:talko.registry.ServiceResponse.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& ServiceResponse::_internal_err_msg() const {
  return err_msg_.GetNoArena();
}
inline void ServiceResponse::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceResponse::set_err_msg(std::string&& value) {
  
  err_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:talko.registry.ServiceResponse.err_msg)
}
inline void ServiceResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:talko.registry.ServiceResponse.err_msg)
}
inline void ServiceResponse::set_err_msg(const void* value, size_t size) {
  
  err_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:talko.registry.ServiceResponse.err_msg)
}
inline std::string* ServiceResponse::_internal_mutable_err_msg() {
  
  return err_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:talko.registry.ServiceResponse.err_msg)
  
  return err_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceResponse::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:talko.registry.ServiceResponse.err_msg)
}

// .talko.registry.ServiceInstance instance = 3;
inline bool ServiceResponse::_internal_has_instance() const {
  return this != internal_default_instance() && instance_ != nullptr;
}
inline bool ServiceResponse::has_instance() const {
  return _internal_has_instance();
}
inline void ServiceResponse::clear_instance() {
  if (GetArenaNoVirtual() == nullptr && instance_ != nullptr) {
    delete instance_;
  }
  instance_ = nullptr;
}
inline const ::talko::registry::ServiceInstance& ServiceResponse::_internal_instance() const {
  const ::talko::registry::ServiceInstance* p = instance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::talko::registry::ServiceInstance*>(
      &::talko::registry::_ServiceInstance_default_instance_);
}
inline const ::talko::registry::ServiceInstance& ServiceResponse::instance() const {
  // @@protoc_insertion_point(field_get:talko.registry.ServiceResponse.instance)
  return _internal_instance();
}
inline ::talko::registry::ServiceInstance* ServiceResponse::release_instance() {
  // @@protoc_insertion_point(field_release:talko.registry.ServiceResponse.instance)
  
  ::talko::registry::ServiceInstance* temp = instance_;
  instance_ = nullptr;
  return temp;
}
inline ::talko::registry::ServiceInstance* ServiceResponse::_internal_mutable_instance() {
  
  if (instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::talko::registry::ServiceInstance>(GetArenaNoVirtual());
    instance_ = p;
  }
  return instance_;
}
inline ::talko::registry::ServiceInstance* ServiceResponse::mutable_instance() {
  // @@protoc_insertion_point(field_mutable:talko.registry.ServiceResponse.instance)
  return _internal_mutable_instance();
}
inline void ServiceResponse::set_allocated_instance(::talko::registry::ServiceInstance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instance_;
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:talko.registry.ServiceResponse.instance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace registry
}  // namespace talko

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::talko::registry::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::talko::registry::RequestType>() {
  return ::talko::registry::RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_register_2eproto
